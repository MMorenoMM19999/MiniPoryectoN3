
package GUI;
/*
aqui se encuentran todas y cada una de las diferentes librerias que fueron utilizadas para la
realizacion de nuestras interfaces, y el llamado de los diferentes packages donde haciamos el llamado de los
diferentes metodos para la buen funcionamiento de la logica de esta interfaz 
*/
import static GUI.MENU.p;
import LOGICA.gestionar_personas;
import static Main.Main_p.c;
import REGISTRO.Modelo_personas;
import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
//////////////////////////////////////////////////////////////////////////////////////////////
/**
 *@author Moreno Romero Miguel Angel 
 * miguel.romero@correounivalle.edu.co
 *@author Valencia Pardo Sergio 
 * sergio.pardo@correounivalle.edu.co
 *@author Valderrama Jorde Enrique
 * jorge.valderrama@correounivalle.edu.co
 */
/////////////////////////////////////////////////////////////////////////////////////////////
/*
nos encontramos nuestra clase principal "GUI_personas " que es la encargada de contener 
la fucionalidad y metodos necesarios para la funcioniladad por la cual se tuvo encuenta su creacion y es el buen 
funcionamiento de la modificacion del archivo.txt
*/
public class GUI_personas extends javax.swing.JFrame {
/*
ahora lo que haremos es inicializar una variable "Filas" que es la que nos ayudara para determinar 
el numero de filas en el cual nosotros hemos seleccionado para poder realizar la respectiva operacion 
solo sobre la fila seleccionada 

*/    
   int filas;
/*
ahora una vez inicializada nuestra variable tipo entero, debemos de llamar nuestros metodos antes inicializados 
para poder tener accesos a ellos y poder operar sobre nuestro archivo de texto adecuado y correcto     
*/   
    Modelo_personas  m =new Modelo_personas();
    gestionar_personas g = new gestionar_personas();  
    DefaultTableModel nuestraTabla;   
    Vector almacenar = new Vector();
   
 /*
una vez que hemos declarado nuestra variable tipo entero (int) y llamado  nuestros metodos antes incializados 
procedemos a inicializar nuestra clase que estara declara al final de todo el codigo que es la responsable 
de pasar una imagen de fondo a nuestro panel principal 
*/    
    
    imagen_fondo f = new imagen_fondo();
    
/*
una vez declarado todas los metodos que vamos a utilizar procedemos a inicializar en nuestro "CONSTRUCTOR" la clase 
responsable de inicializar nuestos elementos del JFrame, el fondo de nuestro JPanel y de colocar los datos visibles
en nuestra JTable apenas aparezca nuestra interfaz.    
*/
    public GUI_personas() {
        
        this.setContentPane(f);
        
        initComponents();
         almacenar.addElement("Nombre");
             almacenar.addElement("Apellidos");
             almacenar.addElement("Nº Identificacion");
              almacenar.addElement("Tipo de afiliacion");
               almacenar.addElement("EPS");
                almacenar.addElement("Tipo de sangre");
                 almacenar.addElement("Nivel de sisben");
                 
         nuestraTabla= new DefaultTableModel(almacenar,0);
         Tabla.setModel(nuestraTabla);
         Tabla.setModel(g.mostrar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        Agregar = new javax.swing.JButton();
        Nombre = new javax.swing.JTextField();
        Fecha = new javax.swing.JTextField();
        Apellidos = new javax.swing.JTextField();
        Id = new javax.swing.JTextField();
        Doctor = new javax.swing.JTextField();
        Especialidad = new javax.swing.JTextField();
        Consultorio = new javax.swing.JTextField();
        Modificar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Texto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INGRESA LA INFORMACION", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.setOpaque(false);

        Tabla.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 51, 51)));
        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellidos", "Nº Identificacion", "Tipo de afiliacion", "EPS", "Tipo de sangre", "Nivel de sisben"
            }
        ));
        Tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Tabla.setOpaque(false);
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        Agregar.setBackground(new java.awt.Color(204, 204, 255));
        Agregar.setText("AGREGAR");
        Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarActionPerformed(evt);
            }
        });

        Nombre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        Nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreActionPerformed(evt);
            }
        });
        Nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NombreKeyTyped(evt);
            }
        });

        Fecha.setBorder(javax.swing.BorderFactory.createTitledBorder("Nivel de sisben"));

        Apellidos.setBorder(javax.swing.BorderFactory.createTitledBorder("Apellidos"));
        Apellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ApellidosKeyTyped(evt);
            }
        });

        Id.setBorder(javax.swing.BorderFactory.createTitledBorder("Nº Identificacion"));
        Id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IdKeyTyped(evt);
            }
        });

        Doctor.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de afiliacion"));
        Doctor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DoctorKeyTyped(evt);
            }
        });

        Especialidad.setBorder(javax.swing.BorderFactory.createTitledBorder("EPS"));

        Consultorio.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de sangre"));
        Consultorio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ConsultorioKeyTyped(evt);
            }
        });

        Modificar.setBackground(new java.awt.Color(204, 204, 255));
        Modificar.setText("MODIFICAR");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        Eliminar.setBackground(new java.awt.Color(204, 204, 255));
        Eliminar.setText("ELIMINAR");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Texto.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                TextoCaretUpdate(evt);
            }
        });

        jLabel1.setText("HAZ TU BUSQUEDA POR NOMBRE  ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("INFORMACION DISPONIBLE DE TODOS LOS AFILIADOS ");

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setText("ATRAS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Consultorio)
                    .addComponent(Especialidad)
                    .addComponent(Agregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Id)
                    .addComponent(Doctor)
                    .addComponent(Apellidos)
                    .addComponent(Fecha)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(106, 106, 106)
                            .addComponent(jLabel2))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Texto)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Doctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Especialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Consultorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Texto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarActionPerformed
 /*
ahora en nuestro boton de "AGREGAR" declaramos un condicional para tener presente que todos los campos  y los datos que se encuentra
en cada uno de los "JTextField" esten llenos, donde si estos estan vacios no dejara que hagas el respectivo registro 
una vez inicializada nuestrra tabla procedemos a declarar varibles de tipo "String"  para escribirlos en el archivo ".TXT" 
suministrada por el usuario.      
*/      
          
        if (Nombre.getText().trim().isEmpty() ||Apellidos.getText().trim().isEmpty() || Especialidad.getText().trim().isEmpty()|| Id.getText().trim().isEmpty()|| Doctor.getText().trim().isEmpty()|| Consultorio.getText().trim().isEmpty()|| Fecha.getText().trim().isEmpty()) {
    
            JOptionPane.showMessageDialog(null, "todos los campos son obligatorios");
    
        }else{
        nuestraTabla = new DefaultTableModel();
       
        String nombre = Nombre.getText();
         String apellidos = Apellidos.getText();
          String id = Id.getText();
           String doctor = Doctor.getText();
            String especialidad = Consultorio.getText();
             String consultorio = Especialidad.getText();
              String fecha = Fecha.getText();
             
              
                      m.setNombre(nombre);
                      m.setApellidos(apellidos);     
                      m.setIdentificacion(id);
                      m.setDoctor(doctor);
                      m.setEspecialidad(especialidad);
                      m.setConsultorio(consultorio);
                      m.setFecha(fecha);
                      
                      
                      g.guardar(m);
                      g.guardarArchivo(m);          
                        
                     JOptionPane.showMessageDialog(null, "se ha guardado el registro con exito");
    //en esta parte lo que hacemos es decirle que despues de AGREGAR los datos nos deje los campos del JTectField vacios                 
                      Nombre.setText("");
                      Apellidos.setText("");
                      Id.setText("");
                      Doctor.setText("");
                      Consultorio.setText("");
                      Especialidad.setText("");
                      Fecha.setText("");
                     
                    
                      Tabla.setModel(g.mostrar());
                          
                      }
        
         
              
                 // TODO add your handling code here:
    }//GEN-LAST:event_AgregarActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
 /*
ahora en esta parte del escucha del boton donde le decimos que cuando hagamos clic nos desactive la interfaz actual 
y nos muestre la anterior estos llamados es lo que nos permite el desplazamiento entre las interfaces graficas al usuario
despues de realizar alguna operacion, en este caso para poder dirigirnos a la interfaz de moficacion de los datos          
*/       
        p.setVisible(false);
        new GUI_modificar_personas().setVisible(true);
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_ModificarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
 /*
ahora en nuestro boton de "AGREGAR" declaramos un TRY and CATCH y dentro de este declaramos nuestro "FOR" para tener presente que todos los campos  y los datos que se encuentra
en cada uno de los "JTextField" se puedan borrar, donde lo que hacemos es que con nuestro fro recorremos el archivo 
y lo volvemos a reescribir sin los datos que fueron seleccionados por el evento del mause 
*/      
    
        nuestraTabla.removeRow(Tabla.getSelectedRow());
        
        try {
            
            String h = "Gestion_Afiliados.txt";
            BufferedWriter bw = new BufferedWriter(new FileWriter(h));
            
            for(int i =0;i<Tabla.getRowCount();i++){
                for(int j=0;j<Tabla.getColumnCount();j++){
                    bw.write((String)(Tabla.getValueAt(i,j)));
                    if(j<Tabla.getColumnCount()-1){
                        bw.write(";");
                        
                    }
                }
                bw.newLine();
            }
            bw.close();
            
        } catch (Exception e) {
           
          JOptionPane.showMessageDialog(null,"los datos NO han sido borrados con exito");   
        }
        
     JOptionPane.showMessageDialog(null,"los datos han sido borrados con exito");
     //aqui le decimos al boton de agregar que se vuelva ha activar 
        Agregar.setEnabled(true);   
// TODO add your handling code here:
    }//GEN-LAST:event_EliminarActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
/*
En este metodo tendremos el evento de que cuando le demos clic al tabla este no solo nos señale la fila 
sino que nos traiga la ifomacion seleccionada en cada uno de los campos donde corresponde la respectiva informacion 
donde es importar tener en cuenta que seguimos trabajando con lamatriz antes definida donde para taer el dato 
es necesario tener en cuenta la posicion dekl mismo la cual la pasaremos a nuestra variable entera(int) antes inicializada 
llamada "Filas".        
*/       
        Agregar.setEnabled(false);   
        this.nuestraTabla= (DefaultTableModel)Tabla.getModel();
         
        int selecionado = Tabla.getSelectedRow();

                  
            filas= selecionado;

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void NombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NombreKeyTyped
/*
ahora lo que hacemos es declarar una variable entero y declaramos metodos boolean para decirle que todos los campos son obligatorios 
y que no se permite que estos esten vacios es decir que la informacion dbe ser de tipo string o numerica sin importar que el dato este escrito 
como "VACIO " o "NULL" pero en si esto nos ayuda a que el usuario nos ingrese un valor de manera obligatoria         
*/     
        
        
        int key = evt.getKeyChar();

    boolean mayusculas = key >= 65 && key <= 90;
    boolean minusculas = key >= 97 && key <= 122;
    boolean espacio = key == 32;
            
     if (!(minusculas || mayusculas || espacio))
    {
        evt.consume();
    }


        // TODO add your handling code here:
    }//GEN-LAST:event_NombreKeyTyped

    private void ApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ApellidosKeyTyped
/*
ahora lo que hacemos es declarar una variable entero y declaramos metodos boolean para decirle que todos los campos son obligatorios 
y que no se permite que estos esten vacios es decir que la informacion dbe ser de tipo string o numerica sin importar que el dato este escrito 
como "VACIO " o "NULL" pero en si esto nos ayuda a que el usuario nos ingrese un valor de manera obligatoria         
*/ 
 int key = evt.getKeyChar();

    boolean mayusculas = key >= 65 && key <= 90;
    boolean minusculas = key >= 97 && key <= 122;
    boolean espacio = key == 32;
            
     if (!(minusculas || mayusculas || espacio))
    {
        evt.consume();
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_ApellidosKeyTyped

    private void IdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IdKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IdKeyTyped

    private void NombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreActionPerformed

    private void ConsultorioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConsultorioKeyTyped
/*
ahora lo que hacemos es declarar una variable entero y declaramos metodos boolean para decirle que todos los campos son obligatorios 
y que no se permite que estos esten vacios es decir que la informacion dbe ser de tipo string o numerica sin importar que el dato este escrito 
como "VACIO " o "NULL" pero en si esto nos ayuda a que el usuario nos ingrese un valor de manera obligatoria         
*/  
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

        if (!(minusculas || mayusculas || espacio))
        {
            evt.consume();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ConsultorioKeyTyped

    private void DoctorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DoctorKeyTyped
/*
ahora lo que hacemos es declarar una variable entero y declaramos metodos boolean para decirle que todos los campos son obligatorios 
y que no se permite que estos esten vacios es decir que la informacion dbe ser de tipo string o numerica sin importar que el dato este escrito 
como "VACIO " o "NULL" pero en si esto nos ayuda a que el usuario nos ingrese un valor de manera obligatoria         
*/  
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

        if (!(minusculas || mayusculas || espacio))
        {
            evt.consume();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_DoctorKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
/*
ahora en esta parte del escucha del boton donde le decimos que cuando hagamos clic nos desactive la interfaz actual 
y nos muestre la anterior estos llamados es lo que nos permite el desplazamiento entre las interfaces graficas al usuario
despues de realizar alguna operacion         
*/
      c.setVisible(true);
      p.setVisible(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TextoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_TextoCaretUpdate
/*
aqui lo que hacemos es en campo de busqueda que es un "JTextField" lo cual lo designaremos que nos busque por nombre,
nos traiga eso que el usuario ingresa en el campo y lo compare con la columna y las filas que conforman a Nombre, donde si hay alguna coincidencia
este nos ilumine la fila.        
*/
        
        String letras = Texto.getText();

       for(int i=0; i<Tabla.getRowCount();i++){
           if(Tabla.getValueAt(i,0).equals(letras)){
               Tabla.changeSelection(i,0,false,false);
           }
       }

       // TODO add your handling code here:
    }//GEN-LAST:event_TextoCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_personas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_personas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_personas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_personas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_personas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Agregar;
    public javax.swing.JTextField Apellidos;
    public javax.swing.JTextField Consultorio;
    public javax.swing.JTextField Doctor;
    public javax.swing.JButton Eliminar;
    public javax.swing.JTextField Especialidad;
    public javax.swing.JTextField Fecha;
    public javax.swing.JTextField Id;
    public javax.swing.JButton Modificar;
    public javax.swing.JTextField Nombre;
    public javax.swing.JTable Tabla;
    public javax.swing.JTextField Texto;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
/*
ahora aqui declaramos nuestra clase "Imagen_Fondo" que es la que utilizaremos para pasar le una imagen anuestro JPanel 
para darle un mejor entorno visual a nuestra intrfaz grafica la cual fue inicializada al inicio del codigo y llamada
para su ejecucion en el constructor.     
*/
    class imagen_fondo extends JPanel{
    private Image imagen;
    //metodo 
    public void paint (Graphics g){
        imagen = new ImageIcon(getClass().getResource("/IMAGENES/fondo_registro.png")).getImage();
        g.drawImage(imagen,0, 0, getWidth(),getHeight(),this);
        setOpaque(false);
        super.paint(g);
    }
    
}

}
